LOCAL_LOAD_ARG_1=clocal$index.i = (jint) $arg;
LOCAL_LOAD_ARG_2=clocal$index.i = (jint) $arg;
LOCAL_LOAD_ARG_3=clocal$index.i = (jint) $arg;
LOCAL_LOAD_ARG_4=clocal$index.i = (jint) $arg;
LOCAL_LOAD_ARG_5=clocal$index.i = $arg;
LOCAL_LOAD_ARG_6=clocal$index.f = $arg;
LOCAL_LOAD_ARG_7=clocal$index.j = $arg;
LOCAL_LOAD_ARG_8=clocal$index.d = $arg;
LOCAL_LOAD_ARG_9=clocal$index.l = $arg; refs.insert(clocal$index.l);
LOCAL_LOAD_ARG_10=clocal$index.l = $arg; refs.insert(clocal$index.l);
LOCAL_LOAD_ARG_11=clocal$index.l = $arg; refs.insert(clocal$index.l);

NOP=;
ACONST_NULL=cstack$stackindex0.l = nullptr;
ICONST_M1=cstack$stackindex0.i = -1;
ICONST_0=cstack$stackindex0.i = 0;
ICONST_1=cstack$stackindex0.i = 1;
ICONST_2=cstack$stackindex0.i = 2;
ICONST_3=cstack$stackindex0.i = 3;
ICONST_4=cstack$stackindex0.i = 4;
ICONST_5=cstack$stackindex0.i = 5;
LCONST_0=cstack$stackindex0.j = 0;
LCONST_1=cstack$stackindex0.j = 1;
FCONST_0=cstack$stackindex0.f = 0.0f;
FCONST_1=cstack$stackindex0.f = 1.0f;
FCONST_2=cstack$stackindex0.f = 2.0f;
DCONST_0=cstack$stackindex0.d = 0.0;
DCONST_1=cstack$stackindex0.d = 1.0;
BIPUSH=cstack$stackindex0.i = (jint) $operand;
SIPUSH=cstack$stackindex0.i = (jint) $operand;
LDC_STRING=cstack$stackindex0.l = $cst_ptr;
LDC_INT=cstack$stackindex0.i = $cst;
LDC_FLOAT=cstack$stackindex0.f = $cst;
LDC_LONG=cstack$stackindex0.j = $cst;
LDC_DOUBLE=cstack$stackindex0.d = $cst;
LDC_CLASS=cstack$stackindex0.l = $cst_ptr;
ILOAD=cstack$stackindex0.i = clocal$var.i;
LLOAD=cstack$stackindex0.j = clocal$var.j;
FLOAD=cstack$stackindex0.f = clocal$var.f;
DLOAD=cstack$stackindex0.d = clocal$var.d;
ALOAD=cstack$stackindex0.l = clocal$var.l; refs.insert(cstack$stackindex0.l);
IALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetIntArrayRegion((jintArray) cstack$stackindexm2.l, cstack$stackindexm1.i, 1, &cstack$stackindexm2.i); } $trycatchhandler
IALOAD_S_VARS=#NPE,#ERROR_DESC
IALOAD_S_CONST_NPE=java/lang/NullPointerException
IALOAD_S_CONST_ERROR_DESC=IALOAD npe
LALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetLongArrayRegion((jlongArray) cstack$stackindexm2.l, cstack$stackindexm1.i, 1, &cstack$stackindexm2.j); } $trycatchhandler
LALOAD_S_VARS=#NPE,#ERROR_DESC
LALOAD_S_CONST_NPE=java/lang/NullPointerException
LALOAD_S_CONST_ERROR_DESC=LALOAD npe
FALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetFloatArrayRegion((jfloatArray) cstack$stackindexm2.l, cstack$stackindexm1.i, 1, &cstack$stackindexm2.f); } $trycatchhandler
FALOAD_S_VARS=#NPE,#ERROR_DESC
FALOAD_S_CONST_NPE=java/lang/NullPointerException
FALOAD_S_CONST_ERROR_DESC=FALOAD npe
DALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->GetDoubleArrayRegion((jdoubleArray) cstack$stackindexm2.l, cstack$stackindexm1.i, 1, &cstack$stackindexm2.d); } $trycatchhandler
DALOAD_S_VARS=#NPE,#ERROR_DESC
DALOAD_S_CONST_NPE=java/lang/NullPointerException
DALOAD_S_CONST_ERROR_DESC=DALOAD npe
AALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$stackindexm2.l = env->GetObjectArrayElement((jobjectArray) cstack$stackindexm2.l, cstack$stackindexm1.i); refs.insert(cstack$stackindexm2.l); } $trycatchhandler
AALOAD_S_VARS=#NPE,#ERROR_DESC
AALOAD_S_CONST_NPE=java/lang/NullPointerException
AALOAD_S_CONST_ERROR_DESC=AALOAD npe
BALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$stackindexm2.i = (jint) utils::baload(env, (jarray) cstack$stackindexm2.l, cstack$stackindexm1.i); } $trycatchhandler
BALOAD_S_VARS=#NPE,#ERROR_DESC
BALOAD_S_CONST_NPE=java/lang/NullPointerException
BALOAD_S_CONST_ERROR_DESC=BALOAD npe
CALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { jchar temp = 0; env->GetCharArrayRegion((jcharArray) cstack$stackindexm2.l, cstack$stackindexm1.i, 1, &temp); cstack$stackindexm2.i = (jint) temp; } $trycatchhandler
CALOAD_S_VARS=#NPE,#ERROR_DESC
CALOAD_S_CONST_NPE=java/lang/NullPointerException
CALOAD_S_CONST_ERROR_DESC=CALOAD npe
SALOAD=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { jshort temp = 0; env->GetShortArrayRegion((jshortArray) cstack$stackindexm2.l, cstack$stackindexm1.i, 1, &temp); cstack$stackindexm2.i = (jint) temp; } $trycatchhandler
SALOAD_S_VARS=#NPE,#ERROR_DESC
SALOAD_S_CONST_NPE=java/lang/NullPointerException
SALOAD_S_CONST_ERROR_DESC=SALOAD npe
ISTORE=clocal$var.i = cstack$stackindexm1.i;
LSTORE=clocal$var.j = cstack$stackindexm2.j;
FSTORE=clocal$var.f = cstack$stackindexm1.f;
DSTORE=clocal$var.d = cstack$stackindexm2.d;
ASTORE=clocal$var.l = cstack$stackindexm1.l; refs.insert(cstack$stackindexm1.l);
IASTORE=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->SetIntArrayRegion((jintArray) cstack$stackindexm3.l, cstack$stackindexm2.i, 1, &cstack$stackindexm1.i); } $trycatchhandler
IASTORE_S_VARS=#NPE,#ERROR_DESC
IASTORE_S_CONST_NPE=java/lang/NullPointerException
IASTORE_S_CONST_ERROR_DESC=IASTORE npe
LASTORE=if (cstack$stackindexm4.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->SetLongArrayRegion((jlongArray) cstack$stackindexm4.l, cstack$stackindexm3.i, 1, &cstack$stackindexm2.j); } $trycatchhandler
LASTORE_S_VARS=#NPE,#ERROR_DESC
LASTORE_S_CONST_NPE=java/lang/NullPointerException
LASTORE_S_CONST_ERROR_DESC=LASTORE npe
FASTORE=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->SetFloatArrayRegion((jfloatArray) cstack$stackindexm3.l, cstack$stackindexm2.i, 1, &cstack$stackindexm1.f); } $trycatchhandler
FASTORE_S_VARS=#NPE,#ERROR_DESC
FASTORE_S_CONST_NPE=java/lang/NullPointerException
FASTORE_S_CONST_ERROR_DESC=FASTORE npe
DASTORE=if (cstack$stackindexm4.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->SetDoubleArrayRegion((jdoubleArray) cstack$stackindexm4.l, cstack$stackindexm3.i, 1, &cstack$stackindexm2.d); } $trycatchhandler
DASTORE_S_VARS=#NPE,#ERROR_DESC
DASTORE_S_CONST_NPE=java/lang/NullPointerException
DASTORE_S_CONST_ERROR_DESC=DASTORE npe
AASTORE=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { env->SetObjectArrayElement((jobjectArray) cstack$stackindexm3.l, cstack$stackindexm2.i, cstack$stackindexm1.l); } $trycatchhandler
AASTORE_S_VARS=#NPE,#ERROR_DESC
AASTORE_S_CONST_NPE=java/lang/NullPointerException
AASTORE_S_CONST_ERROR_DESC=AASTORE npe
BASTORE=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { utils::bastore(env, (jarray) cstack$stackindexm3.l, cstack$stackindexm2.i, cstack$stackindexm1.i); } $trycatchhandler
BASTORE_S_VARS=#NPE,#ERROR_DESC
BASTORE_S_CONST_NPE=java/lang/NullPointerException
BASTORE_S_CONST_ERROR_DESC=BASTORE npe
CASTORE=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { jchar temp = (jchar) cstack$stackindexm1.i; env->SetCharArrayRegion((jcharArray) cstack$stackindexm3.l, cstack$stackindexm2.i, 1, &temp); } $trycatchhandler
CASTORE_S_VARS=#NPE,#ERROR_DESC
CASTORE_S_CONST_NPE=java/lang/NullPointerException
CASTORE_S_CONST_ERROR_DESC=CASTORE npe
SASTORE=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { jshort temp = (jshort) cstack$stackindexm1.i; env->SetShortArrayRegion((jshortArray) cstack$stackindexm3.l, cstack$stackindexm2.i, 1, &temp); } $trycatchhandler
SASTORE_S_VARS=#NPE,#ERROR_DESC
SASTORE_S_CONST_NPE=java/lang/NullPointerException
SASTORE_S_CONST_ERROR_DESC=SASTORE npe
POP=;
POP2=;
DUP=cstack$stackindex0 = cstack$stackindexm1;
DUP_X1=cstack$stackindex0 = cstack$stackindexm1; cstack$stackindexm1 = cstack$stackindexm2; cstack$stackindexm2 = cstack$stackindex0;
DUP_X2=cstack$stackindex0 = cstack$stackindexm1; cstack$stackindexm1 = cstack$stackindexm2; cstack$stackindexm2 = cstack$stackindexm3; cstack$stackindexm3 = cstack$stackindex0;
DUP2=cstack$stackindex0 = cstack$stackindexm2; cstack$stackindex1 = cstack$stackindexm1;
DUP2_X1=cstack$stackindex0 = cstack$stackindexm2; cstack$stackindex1 = cstack$stackindexm1; cstack$stackindexm1 = cstack$stackindexm3; cstack$stackindexm2 = cstack$stackindex1; cstack$stackindexm3 = cstack$stackindex0;
DUP2_X2=cstack$stackindex0 = cstack$stackindexm2; cstack$stackindex1 = cstack$stackindexm1; cstack$stackindexm1 = cstack$stackindexm3; cstack$stackindexm2 = cstack$stackindexm4; cstack$stackindexm3 = cstack$stackindex1; cstack$stackindexm4 = cstack$stackindex0;
SWAP=std::swap(cstack$stackindexm1, cstack$stackindexm2);
IADD=cstack$stackindexm2.i = cstack$stackindexm2.i + cstack$stackindexm1.i;
LADD=cstack$stackindexm4.j = cstack$stackindexm4.j + cstack$stackindexm2.j;
FADD=cstack$stackindexm2.f = cstack$stackindexm2.f + cstack$stackindexm1.f;
DADD=cstack$stackindexm4.d = cstack$stackindexm4.d + cstack$stackindexm2.d;
ISUB=cstack$stackindexm2.i = cstack$stackindexm2.i - cstack$stackindexm1.i;
LSUB=cstack$stackindexm4.j = cstack$stackindexm4.j - cstack$stackindexm2.j;
FSUB=cstack$stackindexm2.f = cstack$stackindexm2.f - cstack$stackindexm1.f;
DSUB=cstack$stackindexm4.d = cstack$stackindexm4.d - cstack$stackindexm2.d;
IMUL=cstack$stackindexm2.i = cstack$stackindexm2.i * cstack$stackindexm1.i;
LMUL=cstack$stackindexm4.j = cstack$stackindexm4.j * cstack$stackindexm2.j;
FMUL=cstack$stackindexm2.f = cstack$stackindexm2.f * cstack$stackindexm1.f;
DMUL=cstack$stackindexm4.d = cstack$stackindexm4.d * cstack$stackindexm2.d;
IDIV=if (cstack$stackindexm1.i == -1 && cstack$stackindexm2.i == ((jint) 2147483648U)) { } else { if (cstack$stackindexm1.i == 0) { utils::throw_re(env, #AE, #ERROR_DESC, $line); $trycatchhandler } else { cstack$stackindexm2.i = cstack$stackindexm2.i / cstack$stackindexm1.i; } }
IDIV_S_VARS=#AE,#ERROR_DESC
IDIV_S_CONST_AE=java/lang/ArithmeticException
IDIV_S_CONST_ERROR_DESC=IDIV / by 0
LDIV=if (cstack$stackindexm2.j == -1 && cstack$stackindexm4.j == ((jlong) 9223372036854775808ULL)) { } else if (cstack$stackindexm2.j == 0) { utils::throw_re(env, #AE, #ERROR_DESC, $line); $trycatchhandler } else { cstack$stackindexm4.j = cstack$stackindexm4.j / cstack$stackindexm2.j; }
LDIV_S_VARS=#AE,#ERROR_DESC
LDIV_S_CONST_AE=java/lang/ArithmeticException
LDIV_S_CONST_ERROR_DESC=LDIV / by 0
FDIV=cstack$stackindexm2.f = cstack$stackindexm2.f / cstack$stackindexm1.f;
DDIV=cstack$stackindexm4.d = cstack$stackindexm4.d / cstack$stackindexm2.d;
IREM=if (cstack$stackindexm1.i == 0) { utils::throw_re(env, #AE, #ERROR_DESC, $line); $trycatchhandler } else { cstack$stackindexm2.i = cstack$stackindexm2.i % cstack$stackindexm1.i; }
IREM_S_VARS=#AE,#ERROR_DESC
IREM_S_CONST_AE=java/lang/ArithmeticException
IREM_S_CONST_ERROR_DESC=IREM % by 0
LREM=if (cstack$stackindexm2.j == 0) { utils::throw_re(env, #AE, #ERROR_DESC, $line); $trycatchhandler } else { cstack$stackindexm4.j = cstack$stackindexm4.j % cstack$stackindexm2.j; }
LREM_S_VARS=#AE,#ERROR_DESC
LREM_S_CONST_AE=java/lang/ArithmeticException
LREM_S_CONST_ERROR_DESC=LREM % by 0
FREM=cstack$stackindexm2.f = std::fmod(cstack$stackindexm2.f, cstack$stackindexm1.f);
DREM=cstack$stackindexm4.d = std::fmod(cstack$stackindexm4.d, cstack$stackindexm2.d);
INEG=cstack$stackindexm1.i = -cstack$stackindexm1.i;
LNEG=cstack$stackindexm2.j = -cstack$stackindexm2.j;
FNEG=cstack$stackindexm1.f = -cstack$stackindexm1.f;
DNEG=cstack$stackindexm2.d = -cstack$stackindexm2.d;
ISHL=cstack$stackindexm2.i = cstack$stackindexm2.i << (0x1f & cstack$stackindexm1.i);
LSHL=cstack$stackindexm3.j = cstack$stackindexm3.j << (0x3f & cstack$stackindexm1.i);
ISHR=cstack$stackindexm2.i = cstack$stackindexm2.i >> (0x1f & cstack$stackindexm1.i);
LSHR=cstack$stackindexm3.j = cstack$stackindexm3.j >> (0x3f & cstack$stackindexm1.i);
IUSHR=cstack$stackindexm2.i = (jint) (((uint32_t) cstack$stackindexm2.i) >> (((uint32_t) cstack$stackindexm1.i) & 0x1f));
LUSHR=cstack$stackindexm3.j = (jlong) (((uint64_t) cstack$stackindexm3.j) >> (((uint64_t) cstack$stackindexm1.i) & 0x3f));
IAND=cstack$stackindexm2.i = cstack$stackindexm2.i & cstack$stackindexm1.i;
LAND=cstack$stackindexm4.j = cstack$stackindexm4.j & cstack$stackindexm2.j;
IOR=cstack$stackindexm2.i = cstack$stackindexm2.i | cstack$stackindexm1.i;
LOR=cstack$stackindexm4.j = cstack$stackindexm4.j | cstack$stackindexm2.j;
IXOR=cstack$stackindexm2.i = cstack$stackindexm2.i ^ cstack$stackindexm1.i;
LXOR=cstack$stackindexm4.j = cstack$stackindexm4.j ^ cstack$stackindexm2.j;
IINC=clocal$var.i += $incr;
I2L=cstack$stackindexm1.j = cstack$stackindexm1.i;
I2F=cstack$stackindexm1.f = (jfloat) cstack$stackindexm1.i;
I2D=cstack$stackindexm1.d = (jdouble) cstack$stackindexm1.i;
L2I=cstack$stackindexm2.i = (jint) cstack$stackindexm2.j;
L2F=cstack$stackindexm2.f = (jfloat) cstack$stackindexm2.j;
L2D=cstack$stackindexm2.d = (jdouble) cstack$stackindexm2.j;
F2I=cstack$stackindexm1.i = (jint) cstack$stackindexm1.f;
F2L=cstack$stackindexm1.j = (jlong) cstack$stackindexm1.f;
F2D=cstack$stackindexm1.d = (jdouble) cstack$stackindexm1.f;
D2I=cstack$stackindexm2.i = (jint) cstack$stackindexm2.d;
D2L=cstack$stackindexm2.j = (jlong) cstack$stackindexm2.d;
D2F=cstack$stackindexm2.f = (jfloat) cstack$stackindexm2.d;
I2B=cstack$stackindexm1.i = (jint) (jbyte) cstack$stackindexm1.i;
I2C=cstack$stackindexm1.i = (jint) (jchar) cstack$stackindexm1.i;
I2S=cstack$stackindexm1.i = (jint) (jshort) cstack$stackindexm1.i;
LCMP=cstack$stackindexm4.i = (cstack$stackindexm4.j == cstack$stackindexm2.j) ? 0 : (cstack$stackindexm4.j > cstack$stackindexm2.j ? 1 : -1);
FCMPL={ jfloat value1 = cstack$stackindexm2.f; jfloat value2 = cstack$stackindexm1.f; cstack$stackindexm2.i = value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : -1)); }
FCMPG={ jfloat value1 = cstack$stackindexm2.f; jfloat value2 = cstack$stackindexm1.f; cstack$stackindexm2.i = value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : 1)); }
DCMPL={ jdouble value1 = cstack$stackindexm4.d; jdouble value2 = cstack$stackindexm2.d; cstack$stackindexm4.i = value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : -1)); }
DCMPG={ jdouble value1 = cstack$stackindexm4.d; jdouble value2 = cstack$stackindexm2.d; cstack$stackindexm4.i = value1 > value2 ? 1 : ((value1 == value2) ? 0 : ((value1 < value2) ? -1 : 1)); }
IFEQ=if (cstack$stackindexm1.i == 0) goto $label;
IFNE=if (cstack$stackindexm1.i != 0) goto $label;
IFLT=if (cstack$stackindexm1.i < 0) goto $label;
IFLE=if (cstack$stackindexm1.i <= 0) goto $label;
IFGT=if (cstack$stackindexm1.i > 0) goto $label;
IFGE=if (cstack$stackindexm1.i >= 0) goto $label;
IF_ICMPEQ=if (cstack$stackindexm2.i == cstack$stackindexm1.i) goto $label;
IF_ICMPNE=if (cstack$stackindexm2.i != cstack$stackindexm1.i) goto $label;
IF_ICMPLT=if (cstack$stackindexm2.i < cstack$stackindexm1.i) goto $label;
IF_ICMPLE=if (cstack$stackindexm2.i <= cstack$stackindexm1.i) goto $label;
IF_ICMPGT=if (cstack$stackindexm2.i > cstack$stackindexm1.i) goto $label;
IF_ICMPGE=if (cstack$stackindexm2.i >= cstack$stackindexm1.i) goto $label;
IF_ACMPEQ=if (env->IsSameObject(cstack$stackindexm2.l, cstack$stackindexm1.l)) goto $label;
IF_ACMPNE=if (!env->IsSameObject(cstack$stackindexm2.l, cstack$stackindexm1.l)) goto $label;
GOTO=goto $label;
IRETURN=return ($rettype) cstack$stackindexm1.i;
LRETURN=return ($rettype) cstack$stackindexm2.j;
FRETURN=return ($rettype) cstack$stackindexm1.f;
DRETURN=return ($rettype) cstack$stackindexm2.d;
ARETURN=return ($rettype) cstack$stackindexm1.l;
RETURN=return;
NEW=if (jobject obj = env->AllocObject($desc_ptr)) { cstack$stackindex0.l = obj; refs.insert(obj); } $trycatchhandler
ANEWARRAY=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewObjectArray(cstack$stackindexm1.i, $desc_ptr, nullptr); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
ANEWARRAY_S_VARS=#NASE,#ERROR_DESC
ANEWARRAY_S_CONST_NASE=java/lang/NegativeArraySizeException
ANEWARRAY_S_CONST_ERROR_DESC=ANEWARRAY array size < 0
ARRAYLENGTH=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.i = env->GetArrayLength((jarray) cstack$stackindexm1.l); $trycatchhandler
ARRAYLENGTH_S_VARS=#NPE,#ERROR_DESC
ARRAYLENGTH_S_CONST_NPE=java/lang/NullPointerException
ARRAYLENGTH_S_CONST_ERROR_DESC=ARRAYLENGTH npe
ATHROW=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { jthrowable exception = (jthrowable) cstack$stackindexm1.l; env->Throw(exception); refs.insert(exception); } $trycatchhandler
ATHROW_S_VARS=#NPE,#ERROR_DESC
ATHROW_S_CONST_NPE=java/lang/NullPointerException
ATHROW_S_CONST_ERROR_DESC=ATHROW npe
INSTANCEOF=cstack$stackindexm1.i = cstack$stackindexm1.l == nullptr ? false : env->IsInstanceOf(cstack$stackindexm1.l, $desc_ptr);
MONITORENTER=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->MonitorEnter(cstack$stackindexm1.l); $trycatchhandler
MONITORENTER_S_VARS=#NPE,#ERROR_DESC
MONITORENTER_S_CONST_NPE=java/lang/NullPointerException
MONITORENTER_S_CONST_ERROR_DESC=MONITORENTER npe
MONITOREXIT=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->MonitorExit(cstack$stackindexm1.l); $trycatchhandler
MONITOREXIT_S_VARS=#NPE,#ERROR_DESC
MONITOREXIT_S_CONST_NPE=java/lang/NullPointerException
MONITOREXIT_S_CONST_ERROR_DESC=MONITORENTER npe
IFNULL=if (env->IsSameObject(cstack$stackindexm1.l, nullptr)) goto $label;
IFNONNULL=if (!env->IsSameObject(cstack$stackindexm1.l, nullptr)) goto $label;
TABLESWITCH_START=switch (cstack$stackindexm1.i) {
TABLESWITCH_PART=    case $index: goto $label; break;
TABLESWITCH_DEFAULT=    default: goto $label; break;
TABLESWITCH_END=}
LOOKUPSWITCH_START=switch (cstack$stackindexm1.i) {
LOOKUPSWITCH_PART=    case $key: goto $label; break;
LOOKUPSWITCH_DEFAULT=    default: goto $label; break;
LOOKUPSWITCH_END=}
TRYCATCH_START=if (env->ExceptionCheck()) { jthrowable exception = env->ExceptionOccurred(); env->ExceptionClear(); cstack0.l = exception; refs.insert(exception);
TRYCATCH_CHECK_STACK=if (env->IsInstanceOf(cstack0.l, $exception_class_ptr)) { goto $handler_block; }
TRYCATCH_ANY_L=goto $handler_block;
TRYCATCH_END_STACK=env->Throw((jthrowable) cstack0.l); return ($rettype) 0;
TRYCATCH_EMPTY=if (env->ExceptionCheck()) { return ($rettype) 0; }

GETSTATIC_1=cstack$stackindex0.i = (jint) env->GetStaticBooleanField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_2=cstack$stackindex0.i = (jint) env->GetStaticCharField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_3=cstack$stackindex0.i = (jint) env->GetStaticByteField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_4=cstack$stackindex0.i = (jint) env->GetStaticShortField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_5=cstack$stackindex0.i = env->GetStaticIntField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_6=cstack$stackindex0.f = env->GetStaticFloatField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_7=cstack$stackindex0.j = env->GetStaticLongField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_8=cstack$stackindex0.d = env->GetStaticDoubleField($class_ptr, $fieldid); $trycatchhandler
GETSTATIC_9=cstack$stackindex0.l = env->GetStaticObjectField($class_ptr, $fieldid); refs.insert(cstack$stackindex0.l); $trycatchhandler
GETSTATIC_10=cstack$stackindex0.l = env->GetStaticObjectField($class_ptr, $fieldid); refs.insert(cstack$stackindex0.l); $trycatchhandler
GETSTATIC_11=cstack$stackindex0.l = env->GetStaticObjectField($class_ptr, $fieldid); refs.insert(cstack$stackindex0.l); $trycatchhandler

GETFIELD_1=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.i = (jint) env->GetBooleanField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_1_S_VARS=#NPE,#ERROR_DESC
GETFIELD_1_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_1_S_CONST_ERROR_DESC=GETFIELD Boolean npe
GETFIELD_2=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.i = (jint) env->GetCharField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_2_S_VARS=#NPE,#ERROR_DESC
GETFIELD_2_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_2_S_CONST_ERROR_DESC=GETFIELD Char npe
GETFIELD_3=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.i = (jint) env->GetByteField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_3_S_VARS=#NPE,#ERROR_DESC
GETFIELD_3_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_3_S_CONST_ERROR_DESC=GETFIELD Byte npe
GETFIELD_4=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.i = (jint) env->GetShortField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_4_S_VARS=#NPE,#ERROR_DESC
GETFIELD_4_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_4_S_CONST_ERROR_DESC=GETFIELD Short npe
GETFIELD_5=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.i = env->GetIntField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_5_S_VARS=#NPE,#ERROR_DESC
GETFIELD_5_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_5_S_CONST_ERROR_DESC=GETFIELD Int npe
GETFIELD_6=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.f = env->GetFloatField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_6_S_VARS=#NPE,#ERROR_DESC
GETFIELD_6_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_6_S_CONST_ERROR_DESC=GETFIELD Float npe
GETFIELD_7=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.j = env->GetLongField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_7_S_VARS=#NPE,#ERROR_DESC
GETFIELD_7_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_7_S_CONST_ERROR_DESC=GETFIELD Long npe
GETFIELD_8=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$stackindexm1.d = env->GetDoubleField(cstack$stackindexm1.l, $fieldid); $trycatchhandler
GETFIELD_8_S_VARS=#NPE,#ERROR_DESC
GETFIELD_8_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_8_S_CONST_ERROR_DESC=GETFIELD Double npe
GETFIELD_9=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->GetObjectField(cstack$stackindexm1.l, $fieldid); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
GETFIELD_9_S_VARS=#NPE,#ERROR_DESC
GETFIELD_9_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_9_S_CONST_ERROR_DESC=GETFIELD Object npe
GETFIELD_10=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->GetObjectField(cstack$stackindexm1.l, $fieldid); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
GETFIELD_10_S_VARS=#NPE,#ERROR_DESC
GETFIELD_10_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_10_S_CONST_ERROR_DESC=GETFIELD Object npe
GETFIELD_11=if (cstack$stackindexm1.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->GetObjectField(cstack$stackindexm1.l, $fieldid); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
GETFIELD_11_S_VARS=#NPE,#ERROR_DESC
GETFIELD_11_S_CONST_NPE=java/lang/NullPointerException
GETFIELD_11_S_CONST_ERROR_DESC=GETFIELD Object npe

PUTSTATIC_1=env->SetStaticBooleanField($class_ptr, $fieldid, (jboolean) cstack$stackindexm1.i); $trycatchhandler
PUTSTATIC_2=env->SetStaticCharField($class_ptr, $fieldid, (jchar) cstack$stackindexm1.i); $trycatchhandler
PUTSTATIC_3=env->SetStaticByteField($class_ptr, $fieldid, (jbyte) cstack$stackindexm1.i); $trycatchhandler
PUTSTATIC_4=env->SetStaticShortField($class_ptr, $fieldid, (jshort) cstack$stackindexm1.i); $trycatchhandler
PUTSTATIC_5=env->SetStaticIntField($class_ptr, $fieldid, cstack$stackindexm1.i); $trycatchhandler
PUTSTATIC_6=env->SetStaticFloatField($class_ptr, $fieldid, cstack$stackindexm1.f); $trycatchhandler
PUTSTATIC_7=env->SetStaticLongField($class_ptr, $fieldid, cstack$stackindexm2.j); $trycatchhandler
PUTSTATIC_8=env->SetStaticDoubleField($class_ptr, $fieldid, cstack$stackindexm2.d); $trycatchhandler
PUTSTATIC_9=env->SetStaticObjectField($class_ptr, $fieldid, cstack$stackindexm1.l); $trycatchhandler
PUTSTATIC_10=env->SetStaticObjectField($class_ptr, $fieldid, cstack$stackindexm1.l); $trycatchhandler
PUTSTATIC_11=env->SetStaticObjectField($class_ptr, $fieldid, cstack$stackindexm1.l); $trycatchhandler

PUTFIELD_1=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetBooleanField(cstack$stackindexm2.l, $fieldid, (jboolean) cstack$stackindexm1.i); $trycatchhandler
PUTFIELD_1_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_1_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_1_S_CONST_ERROR_DESC=PUTFIELD Boolean npe
PUTFIELD_2=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetCharField(cstack$stackindexm2.l, $fieldid, (jchar) cstack$stackindexm1.i); $trycatchhandler
PUTFIELD_2_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_2_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_2_S_CONST_ERROR_DESC=PUTFIELD Char npe
PUTFIELD_3=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetByteField(cstack$stackindexm2.l, $fieldid, (jbyte) cstack$stackindexm1.i); $trycatchhandler
PUTFIELD_3_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_3_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_3_S_CONST_ERROR_DESC=PUTFIELD Byte npe
PUTFIELD_4=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetShortField(cstack$stackindexm2.l, $fieldid, (jshort) cstack$stackindexm1.i); $trycatchhandler
PUTFIELD_4_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_4_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_4_S_CONST_ERROR_DESC=PUTFIELD Short npe
PUTFIELD_5=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetIntField(cstack$stackindexm2.l, $fieldid, cstack$stackindexm1.i); $trycatchhandler
PUTFIELD_5_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_5_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_5_S_CONST_ERROR_DESC=PUTFIELD Int npe
PUTFIELD_6=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetFloatField(cstack$stackindexm2.l, $fieldid, cstack$stackindexm1.f); $trycatchhandler
PUTFIELD_6_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_6_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_6_S_CONST_ERROR_DESC=PUTFIELD Float npe
PUTFIELD_7=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetLongField(cstack$stackindexm3.l, $fieldid, cstack$stackindexm2.j); $trycatchhandler
PUTFIELD_7_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_7_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_7_S_CONST_ERROR_DESC=PUTFIELD Long npe
PUTFIELD_8=if (cstack$stackindexm3.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetDoubleField(cstack$stackindexm3.l, $fieldid, cstack$stackindexm2.d); $trycatchhandler
PUTFIELD_8_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_8_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_8_S_CONST_ERROR_DESC=PUTFIELD Double npe
PUTFIELD_9=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetObjectField(cstack$stackindexm2.l, $fieldid, cstack$stackindexm1.l); $trycatchhandler
PUTFIELD_9_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_9_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_9_S_CONST_ERROR_DESC=PUTFIELD Object npe
PUTFIELD_10=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetObjectField(cstack$stackindexm2.l, $fieldid, cstack$stackindexm1.l); $trycatchhandler
PUTFIELD_10_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_10_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_10_S_CONST_ERROR_DESC=PUTFIELD Object npe
PUTFIELD_11=if (cstack$stackindexm2.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->SetObjectField(cstack$stackindexm2.l, $fieldid, cstack$stackindexm1.l); $trycatchhandler
PUTFIELD_11_S_VARS=#NPE,#ERROR_DESC
PUTFIELD_11_S_CONST_NPE=java/lang/NullPointerException
PUTFIELD_11_S_CONST_ERROR_DESC=PUTFIELD Object npe

NEWARRAY_4=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewBooleanArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_4_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_4_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_4_S_CONST_ERROR_DESC=NEWARRAY Boolean array size < 0
NEWARRAY_5=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewCharArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_5_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_5_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_5_S_CONST_ERROR_DESC=NEWARRAY Char array size < 0
NEWARRAY_6=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewFloatArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_6_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_6_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_6_S_CONST_ERROR_DESC=NEWARRAY Float array size < 0
NEWARRAY_7=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewDoubleArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_7_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_7_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_7_S_CONST_ERROR_DESC=NEWARRAY Double array size < 0
NEWARRAY_8=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewByteArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_8_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_8_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_8_S_CONST_ERROR_DESC=NEWARRAY Byte array size < 0
NEWARRAY_9=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewShortArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_9_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_9_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_9_S_CONST_ERROR_DESC=NEWARRAY Short array size < 0
NEWARRAY_10=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewIntArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_10_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_10_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_10_S_CONST_ERROR_DESC=NEWARRAY Int array size < 0
NEWARRAY_11=if (cstack$stackindexm1.i < 0) utils::throw_re(env, #NASE, #ERROR_DESC, $line); else { cstack$stackindexm1.l = env->NewLongArray(cstack$stackindexm1.i); refs.insert(cstack$stackindexm1.l); } $trycatchhandler
NEWARRAY_11_S_VARS=#NASE,#ERROR_DESC
NEWARRAY_11_S_CONST_NASE=java/lang/NegativeArraySizeException
NEWARRAY_11_S_CONST_ERROR_DESC=NEWARRAY Long array size < 0

INVOKE_ARG_1=cstack$index.i
INVOKE_ARG_2=cstack$index.i
INVOKE_ARG_3=cstack$index.i
INVOKE_ARG_4=cstack$index.i
INVOKE_ARG_5=cstack$index.i
INVOKE_ARG_6=cstack$index.f
INVOKE_ARG_7=cstack$index.j
INVOKE_ARG_8=cstack$index.d
INVOKE_ARG_9=cstack$index.l
INVOKE_ARG_10=cstack$index.l
INVOKE_ARG_11=cstack$index.l

INVOKESPECIAL_0=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->CallNonvirtualVoidMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_0_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_0_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_0_S_CONST_ERROR_DESC=INVOKESPECIAL Void npe
INVOKESPECIAL_1=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallNonvirtualBooleanMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_1_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_1_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_1_S_CONST_ERROR_DESC=INVOKESPECIAL Boolean npe
INVOKESPECIAL_2=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallNonvirtualCharMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_2_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_2_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_2_S_CONST_ERROR_DESC=INVOKESPECIAL Char npe
INVOKESPECIAL_3=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallNonvirtualByteMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_3_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_3_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_3_S_CONST_ERROR_DESC=INVOKESPECIAL Bye npe
INVOKESPECIAL_4=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallNonvirtualShortMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_4_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_4_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_4_S_CONST_ERROR_DESC=INVOKESPECIAL Short npe
INVOKESPECIAL_5=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = env->CallNonvirtualIntMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_5_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_5_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_5_S_CONST_ERROR_DESC=INVOKESPECIAL Int npe
INVOKESPECIAL_6=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.f = env->CallNonvirtualFloatMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_6_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_6_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_6_S_CONST_ERROR_DESC=INVOKESPECIAL Float npe
INVOKESPECIAL_7=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.j = env->CallNonvirtualLongMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_7_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_7_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_7_S_CONST_ERROR_DESC=INVOKESPECIAL Long npe
INVOKESPECIAL_8=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.d = env->CallNonvirtualDoubleMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); $trycatchhandler
INVOKESPECIAL_8_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_8_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_8_S_CONST_ERROR_DESC=INVOKESPECIAL Double npe
INVOKESPECIAL_9=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallNonvirtualObjectMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKESPECIAL_9_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_9_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_9_S_CONST_ERROR_DESC=INVOKESPECIAL Object npe
INVOKESPECIAL_10=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallNonvirtualObjectMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKESPECIAL_10_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_10_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_10_S_CONST_ERROR_DESC=INVOKESPECIAL Object npe
INVOKESPECIAL_11=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallNonvirtualObjectMethod(cstack$objectstackindex.l, $class_ptr, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKESPECIAL_11_S_VARS=#NPE,#ERROR_DESC
INVOKESPECIAL_11_S_CONST_NPE=java/lang/NullPointerException
INVOKESPECIAL_11_S_CONST_ERROR_DESC=INVOKESPECIAL Object npe

INVOKEINTERFACE_0=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->CallVoidMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_0_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_0_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_0_S_CONST_ERROR_DESC=INVOKEINTERFACE Void npe
INVOKEINTERFACE_1=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallBooleanMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_1_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_1_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_1_S_CONST_ERROR_DESC=INVOKEINTERFACE Boolean npe
INVOKEINTERFACE_2=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallCharMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_2_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_2_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_2_S_CONST_ERROR_DESC=INVOKEINTERFACE Char npe
INVOKEINTERFACE_3=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallByteMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_3_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_3_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_3_S_CONST_ERROR_DESC=INVOKEINTERFACE Bye npe
INVOKEINTERFACE_4=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallShortMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_4_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_4_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_4_S_CONST_ERROR_DESC=INVOKEINTERFACE Short npe
INVOKEINTERFACE_5=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = env->CallIntMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_5_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_5_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_5_S_CONST_ERROR_DESC=INVOKEINTERFACE Int npe
INVOKEINTERFACE_6=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.f = env->CallFloatMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_6_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_6_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_6_S_CONST_ERROR_DESC=INVOKEINTERFACE Float npe
INVOKEINTERFACE_7=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.j = env->CallLongMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_7_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_7_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_7_S_CONST_ERROR_DESC=INVOKEINTERFACE Long npe
INVOKEINTERFACE_8=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.d = env->CallDoubleMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEINTERFACE_8_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_8_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_8_S_CONST_ERROR_DESC=INVOKEINTERFACE Double npe
INVOKEINTERFACE_9=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallObjectMethod(cstack$objectstackindex.l, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKEINTERFACE_9_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_9_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_9_S_CONST_ERROR_DESC=INVOKEINTERFACE Object npe
INVOKEINTERFACE_10=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallObjectMethod(cstack$objectstackindex.l, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKEINTERFACE_10_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_10_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_10_S_CONST_ERROR_DESC=INVOKEINTERFACE Object npe
INVOKEINTERFACE_11=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallObjectMethod(cstack$objectstackindex.l, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKEINTERFACE_11_S_VARS=#NPE,#ERROR_DESC
INVOKEINTERFACE_11_S_CONST_NPE=java/lang/NullPointerException
INVOKEINTERFACE_11_S_CONST_ERROR_DESC=INVOKEINTERFACE Object npe

INVOKEVIRTUAL_0=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else env->CallVoidMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_0_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_0_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_0_S_CONST_ERROR_DESC=INVOKEVIRTUAL Void npe
INVOKEVIRTUAL_1=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallBooleanMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_1_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_1_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_1_S_CONST_ERROR_DESC=INVOKEVIRTUAL Boolean npe
INVOKEVIRTUAL_2=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallCharMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_2_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_2_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_2_S_CONST_ERROR_DESC=INVOKEVIRTUAL Char npe
INVOKEVIRTUAL_3=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallByteMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_3_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_3_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_3_S_CONST_ERROR_DESC=INVOKEVIRTUAL Bye npe
INVOKEVIRTUAL_4=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = (jint) env->CallShortMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_4_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_4_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_4_S_CONST_ERROR_DESC=INVOKEVIRTUAL Short npe
INVOKEVIRTUAL_5=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.i = env->CallIntMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_5_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_5_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_5_S_CONST_ERROR_DESC=INVOKEVIRTUAL Int npe
INVOKEVIRTUAL_6=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.f = env->CallFloatMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_6_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_6_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_6_S_CONST_ERROR_DESC=INVOKEVIRTUAL Float npe
INVOKEVIRTUAL_7=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.j = env->CallLongMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_7_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_7_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_7_S_CONST_ERROR_DESC=INVOKEVIRTUAL Long npe
INVOKEVIRTUAL_8=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else cstack$returnstackindex.d = env->CallDoubleMethod(cstack$objectstackindex.l, $methodid$args); $trycatchhandler
INVOKEVIRTUAL_8_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_8_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_8_S_CONST_ERROR_DESC=INVOKEVIRTUAL Double npe
INVOKEVIRTUAL_9=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallObjectMethod(cstack$objectstackindex.l, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKEVIRTUAL_9_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_9_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_9_S_CONST_ERROR_DESC=INVOKEVIRTUAL Object npe
INVOKEVIRTUAL_10=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallObjectMethod(cstack$objectstackindex.l, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKEVIRTUAL_10_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_10_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_10_S_CONST_ERROR_DESC=INVOKEVIRTUAL Object npe
INVOKEVIRTUAL_11=if (cstack$objectstackindex.l == nullptr) utils::throw_re(env, #NPE, #ERROR_DESC, $line); else { cstack$returnstackindex.l = env->CallObjectMethod(cstack$objectstackindex.l, $methodid$args); refs.insert(cstack$returnstackindex.l); } $trycatchhandler
INVOKEVIRTUAL_11_S_VARS=#NPE,#ERROR_DESC
INVOKEVIRTUAL_11_S_CONST_NPE=java/lang/NullPointerException
INVOKEVIRTUAL_11_S_CONST_ERROR_DESC=INVOKEVIRTUAL Object npe

INVOKESTATIC_0=env->CallStaticVoidMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_1=cstack$returnstackindex.i = (jint) env->CallStaticBooleanMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_2=cstack$returnstackindex.i = (jint) env->CallStaticCharMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_3=cstack$returnstackindex.i = (jint) env->CallStaticByteMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_4=cstack$returnstackindex.i = (jint) env->CallStaticShortMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_5=cstack$returnstackindex.i = env->CallStaticIntMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_6=cstack$returnstackindex.f = env->CallStaticFloatMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_7=cstack$returnstackindex.j = env->CallStaticLongMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_8=cstack$returnstackindex.d = env->CallStaticDoubleMethod($class_ptr, $methodid$args); $trycatchhandler
INVOKESTATIC_9=cstack$returnstackindex.l = env->CallStaticObjectMethod($class_ptr, $methodid$args); refs.insert(cstack$returnstackindex.l); $trycatchhandler
INVOKESTATIC_10=cstack$returnstackindex.l = env->CallStaticObjectMethod($class_ptr, $methodid$args); refs.insert(cstack$returnstackindex.l); $trycatchhandler
INVOKESTATIC_11=cstack$returnstackindex.l = env->CallStaticObjectMethod($class_ptr, $methodid$args); refs.insert(cstack$returnstackindex.l); $trycatchhandler

MULTIANEWARRAY=cstack$returnstackindex.l = utils::create_multidim_array(env, classloader, $count, $required_count, $desc, $line, $dims); refs.insert(cstack$returnstackindex.l); $trycatchhandler
MULTIANEWARRAY_S_VARS=$desc
MULTIANEWARRAY_VALUE=cstack$returnstackindex.l = utils::create_multidim_array_value<$sort>(env, $count, $required_count, $desc, $line, $dims); refs.insert(cstack$returnstackindex.l); $trycatchhandler
MULTIANEWARRAY_VALUE_S_VARS=$desc
CHECKCAST=if (cstack$stackindexm1.l != nullptr && !env->IsInstanceOf(cstack$stackindexm1.l, $desc_ptr)) { utils::throw_re(env, #CCE, (std::string(#ERROR_DESC) + std::string($desc)).c_str(), $line); $trycatchhandler } 
CHECKCAST_S_VARS=#CCE,#ERROR_DESC,$desc
CHECKCAST_S_CONST_CCE=java/lang/ClassCastException
CHECKCAST_S_CONST_ERROR_DESC=cannot cast to 